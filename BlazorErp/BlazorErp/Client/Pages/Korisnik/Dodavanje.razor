@page "/korisnici/dodavanje"
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using BlazorErp.Shared.Models.Response.Korisnik.Korisnik
@using BlazorErp.Shared.Models.Response.Korisnik.PravoUpravljanjaKorisnikom
@using BlazorErp.Shared.Models.Request.Korisnik

@attribute [Authorize]
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IAuthService authService 

@if (uloge == null)
{
    <ErpPage>
        <CardBody>
            <p><em>Loading...</em></p>
        </CardBody>
    </ErpPage>
}
else
{
    <ErpPage Title="Dodaj korisnika">
        <CardBody>
            <div style="padding: 24px;">
                <Text>Korisničko ime</Text>
                <Input Class="mb-3" @bind-Value="@noviKorisnik.KorisnickoIme" />
                <Text>Ime i prezime</Text>
                <Input Class="mb-3" @bind-Value="@noviKorisnik.PunoIme" />
                <Text>Email</Text>
                <Input Class="mb-3" @bind-Value="@noviKorisnik.Email" />
                <Text>Lozinka</Text>
                <Input Class="mb-3" @bind-Value="@noviKorisnik.Lozinka" />

                <Text>Uloga</Text>
                <MyAutoComplete TItem="PravoUpravljanjaKorisnikomListModelItem" TValue="int" Items="@uloge.Items" @bind-Value="@odabranaUlogaId" ItemText="Uloga" ItemValue="Id" Placeholder="Uloga"></MyAutoComplete>

                <!--<Select Style="display: inline;" Class="mb-4" ShowSearch
            Placeholder="Uloga"
            FilterOption="FilterOptionValue"
            Value="odabranaUloga">
        @foreach (var uloga in uloge.Items)
        {
            <SelectOption Value="@uloga.Id.ToString()">@uloga.Uloga</SelectOption>
        }
    </Select>-->


                <Button Class="header-btn" Type="primary" Loading="loading" OnClick="DodajKorisnika">
                    Dodaj
                </Button>
            </div>
        </CardBody>
    </ErpPage>
}


@using OneOf;
@code{
    bool loading = false;

    private KreirajKorisnikaRequestModel noviKorisnik = new KreirajKorisnikaRequestModel();
    private int odabranaUlogaId;
    private PravoUpravljanjaKorisnikomListModel uloge;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var trenutni = authService.TrenutniKorisnik();
            uloge = await Http.GetFromJsonAsync<PravoUpravljanjaKorisnikomListModel>($"korisnici/pravoupravljanjakorisnikom/{trenutni.UlogaId}");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

    private async Task DodajKorisnika()
    {
        loading = true;
        var uloge = new List<DodavanjeUlogeKorisnika>();
        uloge.Add(new DodavanjeUlogeKorisnika
        {
            VrstaUlogeId = odabranaUlogaId
        });
        noviKorisnik.Uloge = uloge;
        var response = await Http.PostAsJsonAsync<KreirajKorisnikaRequestModel>($"korisnici", noviKorisnik);


        Navigation.NavigateTo($"korisnici/{noviKorisnik.KorisnickoIme}");
    }
}
